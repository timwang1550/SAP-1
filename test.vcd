$date
	Tue Sep 22 00:00:06 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module sap_test $end
$var wire 8 ! display [7:0] $end
$var reg 1 " clk $end
$var reg 1 # debug $end
$var reg 4 $ program_address [3:0] $end
$var reg 8 % program_data [7:0] $end
$var reg 1 & program_mode $end
$var reg 1 ' reset $end
$scope module computer $end
$var wire 8 ( bus [7:0] $end
$var wire 1 " i_clk $end
$var wire 1 # i_debug $end
$var wire 4 ) i_program_address [3:0] $end
$var wire 8 * i_program_data [7:0] $end
$var wire 1 & i_program_mode $end
$var wire 1 ' i_reset $end
$var wire 1 + register_out_load $end
$var wire 1 , register_b_load $end
$var wire 1 - ram_enable $end
$var wire 1 . program_counter_incr $end
$var wire 1 / program_counter_enable $end
$var wire 4 0 opcode [3:0] $end
$var wire 8 1 o_display [7:0] $end
$var wire 4 2 mux_to_ram [3:0] $end
$var wire 4 3 mar_to_mux [3:0] $end
$var wire 1 4 mar_load $end
$var wire 1 5 instruction_send $end
$var wire 1 6 instruction_load $end
$var wire 1 7 alu_substract $end
$var wire 1 8 alu_send $end
$var wire 8 9 alu_b_in [7:0] $end
$var wire 8 : alu_a_in [7:0] $end
$var wire 1 ; accumulator_send $end
$var wire 1 < accumulator_load $end
$scope module acc $end
$var wire 8 = i_bus [7:0] $end
$var wire 1 # i_debug $end
$var wire 1 ' i_reset $end
$var wire 8 > o_bus [7:0] $end
$var wire 8 ? o_unbuffered_out [7:0] $end
$var wire 1 ; i_send_enable $end
$var wire 1 < i_load_enable $end
$var reg 8 @ data [7:0] $end
$upscope $end
$scope module adder_subtracter $end
$var wire 8 A i_a [7:0] $end
$var wire 8 B o_bus [7:0] $end
$var wire 1 7 i_subtract $end
$var wire 1 8 i_send_enable $end
$var wire 8 C i_b [7:0] $end
$var reg 8 D result [7:0] $end
$upscope $end
$scope module buffer $end
$var wire 8 E i_bus [7:0] $end
$var wire 1 # i_debug $end
$var wire 1 ' i_reset $end
$var wire 8 F o_unbuffered_out [7:0] $end
$var wire 1 , i_load_enable $end
$var reg 8 G data [7:0] $end
$upscope $end
$scope module control $end
$var wire 1 " i_clk $end
$var wire 1 # i_debug $end
$var wire 1 & i_program_mode $end
$var wire 1 ' i_reset $end
$var wire 1 + o_register_out_load $end
$var wire 1 , o_register_b_load $end
$var wire 1 - o_ram_enable $end
$var wire 1 . o_program_counter_incr $end
$var wire 1 / o_program_counter_enable $end
$var wire 1 4 o_mar_load $end
$var wire 1 5 o_instruction_send $end
$var wire 1 6 o_instruction_load $end
$var wire 1 7 o_alu_subtract $end
$var wire 1 8 o_alu_send $end
$var wire 1 ; o_accumulator_send $end
$var wire 1 < o_accumulator_load $end
$var wire 4 H i_opcode [3:0] $end
$var reg 4 I ADD [3:0] $end
$var reg 4 J HLT [3:0] $end
$var reg 4 K LDA [3:0] $end
$var reg 4 L OUT [3:0] $end
$var reg 4 M SUB [3:0] $end
$var reg 12 N control_bits [11:0] $end
$var reg 1 O halt $end
$var integer 32 P step [31:0] $end
$upscope $end
$scope module ir $end
$var wire 8 Q i_bus [7:0] $end
$var wire 1 # i_debug $end
$var wire 1 6 i_load_enable $end
$var wire 1 ' i_reset $end
$var wire 1 5 i_send_enable $end
$var wire 4 R o_opcode [3:0] $end
$var wire 4 S o_address [3:0] $end
$var reg 4 T address [3:0] $end
$var reg 4 U opcode [3:0] $end
$upscope $end
$scope module mar $end
$var wire 4 V i_address [3:0] $end
$var wire 1 # i_debug $end
$var wire 1 4 i_load_enable $end
$var wire 1 ' i_reset $end
$var wire 4 W o_address [3:0] $end
$var reg 4 X address [3:0] $end
$upscope $end
$scope module mux $end
$var wire 4 Y i_address_a [3:0] $end
$var wire 4 Z i_address_b [3:0] $end
$var wire 1 & i_select $end
$var wire 4 [ o_address [3:0] $end
$upscope $end
$scope module out $end
$var wire 8 \ i_bus [7:0] $end
$var wire 1 # i_debug $end
$var wire 1 + i_load_enable $end
$var wire 1 ' i_reset $end
$var wire 8 ] o_unbuffered_out [7:0] $end
$var reg 8 ^ data [7:0] $end
$upscope $end
$scope module pc $end
$var wire 1 # i_debug $end
$var wire 1 / i_enable $end
$var wire 1 . i_incr $end
$var wire 1 ' i_reset $end
$var wire 4 _ o_count [3:0] $end
$var reg 4 ` counter [3:0] $end
$var reg 8 a counter_buffer [7:0] $end
$upscope $end
$scope module ram $end
$var wire 4 b i_address [3:0] $end
$var wire 1 # i_debug $end
$var wire 1 - i_enable $end
$var wire 8 c i_program_data [7:0] $end
$var wire 1 & i_program_mode $end
$var wire 8 d o_bus [7:0] $end
$var integer 32 e index [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10000 e
bz d
bx c
bx b
b0zzzz a
b0 `
bz _
bx ^
bx ]
bz \
bx [
bx Z
b0 Y
b0 X
b0 W
bz V
bx U
bx T
bz S
bx R
bz Q
b1 P
1O
b0 N
b10 M
b1110 L
b0 K
b1111 J
b1 I
bx H
bx G
bx F
bz E
bx D
bx C
bz B
bx A
bx @
bx ?
bz >
bz =
0<
0;
bx :
bx 9
08
07
06
05
04
b0 3
bx 2
bx 1
bx 0
0/
0.
0-
0,
0+
bx *
bx )
bz (
x'
0&
bx %
bx $
1#
0"
bx !
$end
#5
1"
#10
b0 2
b0 [
b0 b
0"
b0 $
b0 )
b0 Z
b1001 %
b1001 *
b1001 c
#15
1"
#20
b1 2
b1 [
b1 b
0"
b1 $
b1 )
b1 Z
b11010 %
b11010 *
b11010 c
#25
1"
#30
b10 2
b10 [
b10 b
0"
b10 $
b10 )
b10 Z
b11011 %
b11011 *
b11011 c
#35
1"
#40
b11 2
b11 [
b11 b
0"
b11 $
b11 )
b11 Z
b101100 %
b101100 *
b101100 c
#45
1"
#50
b100 2
b100 [
b100 b
0"
b100 $
b100 )
b100 Z
b1110xxxx %
b1110xxxx *
b1110xxxx c
#55
1"
#60
b101 2
b101 [
b101 b
0"
b101 $
b101 )
b101 Z
b1111xxxx %
b1111xxxx *
b1111xxxx c
#65
1"
#70
b1001 2
b1001 [
b1001 b
0"
b1001 $
b1001 )
b1001 Z
b1110 %
b1110 *
b1110 c
#75
1"
#80
b1010 2
b1010 [
b1010 b
0"
b1010 $
b1010 )
b1010 Z
b10101 %
b10101 *
b10101 c
#85
1"
#90
b1011 2
b1011 [
b1011 b
0"
b1011 $
b1011 )
b1011 Z
b1 %
b1 *
b1 c
#95
1"
#100
b1100 2
b1100 [
b1100 b
0"
b1100 $
b1100 )
b1100 Z
b111 %
b111 *
b111 c
#105
1"
#110
b0 T
b0 0
b0 H
b0 R
b0 U
bz :
bz ?
bz A
bz @
bz 9
bz C
bz F
bz G
bz !
bz 1
bz ]
bz ^
0O
0"
1'
#115
b0 V
bz0000 (
bz0000 =
bz0000 >
bz0000 B
bz0000 E
bz0000 Q
bz0000 \
bz0000 d
b0 _
b0 a
b0 3
b0 W
b0 X
b0 Y
1/
14
b10 P
b11000000000 N
1"
#120
0"
0'
#125
bz V
bz (
bz =
bz >
bz B
bz E
bz Q
bz \
bz d
bz _
b1 `
b0zzzz a
1.
0/
04
b11 P
b100000000000 N
1"
#130
b0 2
b0 [
b0 b
0"
1&
#135
b1001 V
b1001 (
b1001 =
b1001 >
b1001 B
b1001 E
b1001 Q
b1001 \
b1001 d
b1001 T
b0 0
b0 H
b0 R
b0 U
0.
1-
16
b100 P
b110000000 N
1"
#140
0"
#145
b1001 2
b1001 [
b1001 b
b1001 3
b1001 W
b1001 X
b1001 Y
bz1001 (
bz1001 =
bz1001 >
bz1001 B
bz1001 E
bz1001 Q
bz1001 \
bz1001 d
b1001 S
14
0-
06
15
b101 P
b1001000000 N
1"
#150
0"
#155
b1110 :
b1110 ?
b1110 A
b1110 @
b1110 V
b1110 (
b1110 =
b1110 >
b1110 B
b1110 E
b1110 Q
b1110 \
b1110 d
bz S
04
1-
05
1<
b110 P
b100001000 N
1"
#160
0"
#165
bz V
bz (
bz =
bz >
bz B
bz E
bz Q
bz \
bz d
0-
0<
b1 P
b0 N
1"
#170
0"
#175
b1 V
bz0001 (
bz0001 =
bz0001 >
bz0001 B
bz0001 E
bz0001 Q
bz0001 \
bz0001 d
b1 _
b1 2
b1 [
b1 b
b1 a
b1 3
b1 W
b1 X
b1 Y
1/
14
b10 P
b11000000000 N
1"
#180
0"
#185
bz V
bz (
bz =
bz >
bz B
bz E
bz Q
bz \
bz d
bz _
b10 `
b0zzzz a
1.
0/
04
b11 P
b100000000000 N
1"
#190
0"
#195
b1010 V
b11010 (
b11010 =
b11010 >
b11010 B
b11010 E
b11010 Q
b11010 \
b11010 d
b1010 T
b1 0
b1 H
b1 R
b1 U
0.
1-
16
b100 P
b110000000 N
1"
#200
0"
#205
b1010 2
b1010 [
b1010 b
b1010 3
b1010 W
b1010 X
b1010 Y
bz1010 (
bz1010 =
bz1010 >
bz1010 B
bz1010 E
bz1010 Q
bz1010 \
bz1010 d
b1010 S
14
0-
06
15
b101 P
b1001000000 N
1"
#210
0"
#215
b10101 9
b10101 C
b10101 F
b10101 G
b101 V
b10101 (
b10101 =
b10101 >
b10101 B
b10101 E
b10101 Q
b10101 \
b10101 d
bz S
04
1-
05
1,
b110 P
b100000010 N
1"
#220
0"
#225
b100011 :
b100011 ?
b100011 A
b100011 @
b11 V
b100011 (
b100011 =
b100011 >
b100011 B
b100011 E
b100011 Q
b100011 \
b100011 d
b100011 D
0-
18
1<
0,
b1 P
b11000 N
1"
#230
0"
#235
b10 _
b10 2
b10 [
b10 b
b10 a
b10 3
b10 W
b10 X
b10 Y
b10 V
bz0010 (
bz0010 =
bz0010 >
bz0010 B
bz0010 E
bz0010 Q
bz0010 \
bz0010 d
1/
14
08
0<
b10 P
b11000000000 N
1"
#240
0"
#245
bz V
bz (
bz =
bz >
bz B
bz E
bz Q
bz \
bz d
bz _
b11 `
b0zzzz a
1.
0/
04
b11 P
b100000000000 N
1"
#250
0"
#255
b1011 V
b11011 (
b11011 =
b11011 >
b11011 B
b11011 E
b11011 Q
b11011 \
b11011 d
b1011 T
b1 0
b1 H
b1 R
b1 U
0.
1-
16
b100 P
b110000000 N
1"
#260
0"
#265
b1011 2
b1011 [
b1011 b
b1011 3
b1011 W
b1011 X
b1011 Y
bz1011 (
bz1011 =
bz1011 >
bz1011 B
bz1011 E
bz1011 Q
bz1011 \
bz1011 d
b1011 S
14
0-
06
15
b101 P
b1001000000 N
1"
#270
0"
#275
b1 9
b1 C
b1 F
b1 G
b1 V
b1 (
b1 =
b1 >
b1 B
b1 E
b1 Q
b1 \
b1 d
bz S
04
1-
05
1,
b110 P
b100000010 N
1"
#280
0"
#285
b100100 :
b100100 ?
b100100 A
b100100 @
b100 V
b100100 (
b100100 =
b100100 >
b100100 B
b100100 E
b100100 Q
b100100 \
b100100 d
b100100 D
0-
18
1<
0,
b1 P
b11000 N
1"
#290
0"
#295
b11 _
b11 2
b11 [
b11 b
b11 a
b11 3
b11 W
b11 X
b11 Y
b11 V
bz0011 (
bz0011 =
bz0011 >
bz0011 B
bz0011 E
bz0011 Q
bz0011 \
bz0011 d
1/
14
08
0<
b10 P
b11000000000 N
1"
#300
0"
#305
bz V
bz (
bz =
bz >
bz B
bz E
bz Q
bz \
bz d
bz _
b100 `
b0zzzz a
1.
0/
04
b11 P
b100000000000 N
1"
#310
0"
#315
b1100 V
b101100 (
b101100 =
b101100 >
b101100 B
b101100 E
b101100 Q
b101100 \
b101100 d
b1100 T
b10 0
b10 H
b10 R
b10 U
0.
1-
16
b100 P
b110000000 N
1"
#320
0"
#325
b1100 2
b1100 [
b1100 b
b1100 3
b1100 W
b1100 X
b1100 Y
bz1100 (
bz1100 =
bz1100 >
bz1100 B
bz1100 E
bz1100 Q
bz1100 \
bz1100 d
b1100 S
14
0-
06
15
b101 P
b1001000000 N
1"
#330
0"
#335
b111 9
b111 C
b111 F
b111 G
b111 V
b111 (
b111 =
b111 >
b111 B
b111 E
b111 Q
b111 \
b111 d
bz S
04
1-
05
1,
b110 P
b100000010 N
1"
#340
0"
#345
b11101 :
b11101 ?
b11101 A
b11101 @
b1101 V
b11101 (
b11101 =
b11101 >
b11101 B
b11101 E
b11101 Q
b11101 \
b11101 d
b11101 D
0-
17
18
1<
0,
b1 P
b111000 N
1"
#350
0"
#355
b100 _
b100 2
b100 [
b100 b
b100 a
b100 3
b100 W
b100 X
b100 Y
b100 V
bz0100 (
bz0100 =
bz0100 >
bz0100 B
bz0100 E
bz0100 Q
bz0100 \
bz0100 d
1/
14
07
08
0<
b10 P
b11000000000 N
1"
#360
0"
#365
bz V
bz (
bz =
bz >
bz B
bz E
bz Q
bz \
bz d
bz _
b101 `
b0zzzz a
1.
0/
04
b11 P
b100000000000 N
1"
#370
0"
#375
bx V
b1110xxxx (
b1110xxxx =
b1110xxxx >
b1110xxxx B
b1110xxxx E
b1110xxxx Q
b1110xxxx \
b1110xxxx d
bx T
b1110 0
b1110 H
b1110 R
b1110 U
0.
1-
16
b100 P
b110000000 N
1"
#380
0"
#385
b11101 !
b11101 1
b11101 ]
b11101 ^
b1101 V
b11101 (
b11101 =
b11101 >
b11101 B
b11101 E
b11101 Q
b11101 \
b11101 d
0-
06
1;
1+
b101 P
b101 N
1"
#390
0"
#395
bz V
bz (
bz =
bz >
bz B
bz E
bz Q
bz \
bz d
0;
0+
b110 P
b0 N
1"
#400
0"
#405
b1 P
1"
#410
0"
#415
b101 V
bz0101 (
bz0101 =
bz0101 >
bz0101 B
bz0101 E
bz0101 Q
bz0101 \
bz0101 d
b101 _
b101 2
b101 [
b101 b
b101 a
b101 3
b101 W
b101 X
b101 Y
1/
14
b10 P
b11000000000 N
1"
#420
0"
#425
bz V
bz (
bz =
bz >
bz B
bz E
bz Q
bz \
bz d
bz _
b110 `
b0zzzz a
1.
0/
04
b11 P
b100000000000 N
1"
#430
0"
#435
bx V
b1111xxxx (
b1111xxxx =
b1111xxxx >
b1111xxxx B
b1111xxxx E
b1111xxxx Q
b1111xxxx \
b1111xxxx d
bx T
b1111 0
b1111 H
b1111 R
b1111 U
0.
1-
16
b100 P
b110000000 N
1"
#440
0"
#445
bz V
bz (
bz =
bz >
bz B
bz E
bz Q
bz \
bz d
0-
06
b0 N
1O
1"
#450
0"
#455
1"
#460
0"
#465
1"
#470
0"
#475
1"
#480
0"
#485
1"
#490
0"
#495
1"
#500
0"
#505
1"
#510
0"
#515
1"
#520
0"
#525
1"
#530
0"
#535
1"
#540
0"
#545
1"
#550
0"
#555
1"
#560
0"
#565
1"
#570
0"
#575
1"
#580
0"
#585
1"
#590
0"
#595
1"
#600
0"
#605
1"
#610
0"
#615
1"
#620
0"
#625
1"
#630
0"
#635
1"
#640
0"
#645
1"
#650
0"
#655
1"
#660
0"
#665
1"
#670
0"
#675
1"
#680
0"
#685
1"
#690
0"
#695
1"
#700
0"
#705
1"
#710
0"
#715
1"
#720
0"
#725
1"
#730
0"
#735
1"
